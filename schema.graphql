scalar DateTime

type Book {
  id: Int!
  title: String!
  author: String!
  coverImageUrl: String!
  publisher: String!
  synopsis: String!
  pageCount: Int!
}

type ListItem {
  id: Int!
  bookId: Int!
  title: String!
  author: String!
  coverImageUrl: String!
  publisher: String!
  synopsis: String!
  pageCount: Int!
  startDate: DateTime!
  finishDate: DateTime
  rating: Int
}

type User {
  id: Int
  email: String
}

type Query {
  books(query: String): [Book]
  book(id: Int): Book
  user: User
  listItems: [ListItem]
}

type Mutation {
  register(email: String!, password: String!): User
  login(email: String!, password: String!): User
  logout: User
  createListItem(listItemInput: CreateListItemInput!): String
  updateListItem(listItemInput: UpdateListItemInput!): String
  removeListItem(id: Int!): String
}

input CreateListItemInput {
  bookId: Int!
  title: String!
  author: String!
  coverImageUrl: String!
  publisher: String!
  synopsis: String!
  pageCount: Int!
}

input UpdateListItemInput {
  id: Int!
  bookId: Int!
  title: String!
  author: String!
  coverImageUrl: String!
  publisher: String!
  synopsis: String!
  pageCount: Int!
  startDate: DateTime!
  finishDate: DateTime
  rating: Int
  notes: String
}
